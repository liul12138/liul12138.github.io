{"pages":[{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"","text":"唐艺昕 李沁 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"音乐歌单收藏","text":"--- 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 var gitalk = new Gitalk({ clientID: '101dfba7cff3d5f55d0a', clientSecret: '9e52fecc777117fa6ade0a02fa591a068c3ce598', id: '666666', repo: 'issue_database', owner: 'liul12138', admin: \"liul12138\", createIssueManually: true, distractionFreeMode: false }) gitalk.render('comment-container1')","link":"/self-talking/index.html"}],"posts":[{"title":"daily(1)","text":"&nbsp;&nbsp;&nbsp;&nbsp;心情很差,跟同楼层的**大姐对了线,从来没有见到过嗓门这么大的nt。其实很长时间了，我发现自己不但失去了对自己身体的控制，情绪也逐渐失去控制。一天又一天，我知道自己不对劲,但我好想救不了自己,只能看着自己在负反馈循环般的深渊里越坠越深。我害怕夜深时的辗转难眠，害怕明天一觉醒来时又如行尸走肉般的自己。讨厌自己，讨厌眼前的一切。为什么我觉得自己做的一切都没什么价值&nbsp;&nbsp;&nbsp;&nbsp;春暖花会开,我也期待花开的那天…..","link":"/2020/05/03/daily-1/"},{"title":"django学习(1)-简介","text":"dajngo介绍 Django，发音为[`dʒæŋɡəʊ]，是用python语言写的开源web开发框架，并遵循MVC设计。劳伦斯出版集团为了开发以新闻内容为主的网站，而开发出来了这个框架，于2005年7月在BSD许可证下发布。这个名称来源于比利时的爵士音乐家DjangoReinhardt，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SDTimes评选为2013SDTimes100，位列”API、库和框架”分类第6位，被认为是该领域的佼佼者。Django的主要目的是简便、快速的开发数据库驱动的网站。它强调代码复用，多个组件可以很方便的以”插件”形式服务于整个框架，Django有许多功能强大的第三方插件，你甚至可以很方便的开发出自己的工具包。这使得Django具有很强的可扩展性。它还强调快速开发和DRY(DoNotRepeatYourself)原则。 mvc模式 MVC的全拼为Model-View-Controller，最早由TrygveReenskaug在1978年提出，是施乐帕罗奥多研究中心(Xerox PARC)在20世纪80年代为程序语言Smalltalk发明的一种软件设计模式，是为了将传统的输入（input）、处理（processing）、输出（output）任务运用到图形化用户交互模型中而设计的。随着标准输入输出设备的出现，开发人员只需要将精力集中在业务逻辑的分析与实现上。后来被推荐为Oracle旗下Sun公司Java EE平台的设计模式，并且受到越来越多的使用ColdFusion和PHP的开发者的欢迎。现在虽然不再使用原来的分工方式，但是这种分工的思想被沿用下来，广泛应用于软件工程中，是一种典型并且应用广泛的软件架构模式。后来，MVC的思想被应用在了Ｗeb开发方面，被称为Ｗeb MVC框架。MVC框架的核心思想是：解耦，让不同的代码块之间降低耦合，增强代码的可扩展性和可移植性，实现向后兼容。 djangomvt模式 M全拼为Model，与MVC中的M功能相同，负责和数据库交互，进行数据处理。 V全拼为View，与MVC中的C功能相同，接收请求，进行业务处理，返回应答。 T全拼为Template，与MVC中的V功能相同，负责封装构造要返回的html。","link":"/2020/04/30/django%E5%AD%A6%E4%B9%A0-1-%E7%AE%80%E4%BB%8B/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/04/29/hello-world/"},{"title":"django学习(2)-模型module","text":"model是django框架中负责与数据库中进行交互的一部分,在学习的过程中我主要以重构个人blog为驱动 Django模型类Django根据属性的类型确定以下信息: 当前选择的数据库支持字段的类型 渲染管理表单时使用的默认html控件 在管理站点最低限度的验证django会为表创建自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后django不会再创建自动增长的主键列。默认创建的主键列属性为id，可以使用pk代替，pk全拼为primary key。 字段类型 引入Django.db.models包 AutoField：自动增长的IntegerField，通常不用指定，不指定时Django会自动创建属性名为id的自动增长属性。 BooleanField textField：大文本字段，一般超过4000个字符时使用。 IntegerField：整数。 CharField(max_length=字符长度)：字符串。 DecimalField(max_digits=None, decimal_places=None)：十进制浮点数。 参数max_digits表示总位数。 参数decimal_places表示小数位数。 FloatField：浮点数 DateField[auto_now=False, auto_now_add=False])：日期。 参数auto_now表示每次保存对象时，自动设置该字段为当前时间，用于”最后一次修改”的时间戳，它总是使用当前日期，默认为false。 参数auto_now_add表示当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false。 TimeField,DateTimeField,FileField,ImageField 选项 ![](https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/05/01/746471ab9c0ae172a3f1efc25540741a.png)以我个人博客为例给博客定义了文章,标签,目录三个模型类 注意的点有几个 在关联类中,所涉及的四个类型,均在文章定义类中有出现 ForeignKey：一对多，将字段定义在多的一端中。 ManyToManyField：多对多，将字段定义在任意一端中。 OneToOneField：一对一，将字段定义在任意一端中。 可以维护递归的关联关系，使用’self’指定，详见”自关联”。 12345678910111213141516171819202122232425262728293031323334353637383940414243from django.db import models# Create your models here.class ArticleInfo(models.Model): ArticleTittle=models.CharField(max_length=20) ArticleAuthor=models.CharField(max_length=10) ArticleContent=models.DateTimeField(auto_now_add=True) ArticleComment=models.CharField(max_length=20) ArticleCount=models.IntegerField() isDelete=models.BooleanField(default=False) ArticleTag=models.ManyToManyField('Tag',on_delete=models.CASCADE) ArticlePic=models.CharField(max_length=70) ArticleCategory=models.ForeignKey('Category', on_delete=models.CASCADE) ArticleParent=models.ForeignKey('self', null=True, blank=True , on_delete=models.CASCADE) class Meta: &quot;&quot;&quot;定义元类&quot;&quot;&quot; verbose_name='文章' #文章tag类 verbose_name_plural=verbose_name #复数形式 def __str__(self): return self.ArticleTittleclass Tag(models.Model): #定义标签类,为每篇文章添加tag TagName=models.CharField(max_length=10) class Meta: verbose_name = '标签' verbose_name_plural = verbose_name def __str__(self): return self.TagNameclass Category(models.Model): CategoryName = models.CharField(max_length=20) class Meta: verbose_name = '分类' verbose_name_plural = verbose_name def __str__(self): return self.CategoryName 注意点2:在最新的版本中出现,必须要为关联函数添加on_delete项参数,这一点详见on_delete的详细说明 注意点3:更改默认数据库为mysql的步骤 安装MySQL,熟悉其基本操作 安装pymysql,更新model12pip install pymysqlpip upgrade install --upgrade mysqlclient setting.py中做database配置12345678910DATABASES = {'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': 'blog_v1',#数据库名称 'USER':'root',#user name 'PASSWORD': 'vae20000608', #数据库登录密码 'HOST': 'localhost', #数据库所在主机 'PORT': '3306', #数据库端口}} 在项目应用目录下添加12import pymysqlpymysql.install_as_MySQLdb() 在执行完上述配置后,进行模型迁移12python manage.py makemigrationpython manage.py migrate 在MySQL中查询发现完成迁移 查询一下数据发现操作成功","link":"/2020/05/01/django%E5%AD%A6%E4%B9%A0-2-%E6%A8%A1%E5%9E%8Bmodel/"},{"title":"JavaScript中的高阶函数","text":"对象与数组 数组 _js数组与C语言数组有着显著的不同,c语言的数组是预先分配好了空间,而js则更类似一个元祖,弱语言类型决定了其不需要指定变量类型,实现任意存放,任意读取_ 高阶函数 foreach()end123456789101112131415161718192021222324252627282930313233343536373839404142434445464748var exe=new Array('chinese','math','pe','physics');console.log(table[8][7]);console.log(exe.join('-'),exe.reverse(),exe.sort(),)exe.push('english')exe.forEach( function(value){ end+=value; return value; })console.log(end)``` + ## map()``` var obj={ };exe.map( function(value,index) { obj[index]=value; return obj; })console.log(obj);``` + ## filter()``` console.log(obj);console.log(exe.filter( function(value){return value.length&lt;3;}))``` + ## reduce()``` exe3=exe.reduce(function(x,y){ return x+y;})console.log(exe3)``` __类数组对象具有数组的性质,可在对象添加一个length属性值添加显著长度的性质__ ___函数中不指定形参名称,直接通过argument[]数组传入实参___``` function add(` `){ return arguments[0]+arguments[1]; console.log(arguments.length)}console.log(a=add(1,2))","link":"/2020/04/30/JavaScript%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"},{"title":"my_blog","text":"","link":"/2020/04/29/my-blog/"},{"title":"弹性布局","text":"这段时间一直在撸css,发觉css还是有很多门道。css布局，2D,3D变,帧动画还是很有意思,帧动画和变换的强大甚至让我觉得css是一门很强大的工具,今天我还是来总结一下flex弹性盒子。 弹性布局 Flex 是 Flexible Box 的缩写，意为”弹性布局”，可以轻松的控制元素排列、对齐和顺序的控制。现在的终端类型非常多，使用弹性盒模型可以让元素在不同尺寸终端控制尺寸。 弹性盒子的引入 12display:flex;display:inline-flex; 弹性盒子的常用属性 flex-direction flex-wrap flex-direction和flex-wrap可简写为flex-flow 1flex-flow: column wrap; 轴（axis） 采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。 justify-content 用于控制元素在主轴上的排列方式，再次强调是主轴的排列方式。 align-items 用于控制容器元素在交叉轴上的排列方式。 align-content只适用于多行显示的弹性容器，它的作用是当flex容器在交叉轴上有多余的空间时，对元素的对齐处理。 其他常见问题 flex-grow flex-shrink flex-basis关于flex-basis,在此贴上其他一篇网路中找到的博文仅供日后参考flex-basis的深入tantao flex上述三个属性同时可以在flex中设置多个属性 12345678flex:1 0 40px;//指定弹性盒子放大倍数为一,shrink值为0,basis属性为40px;``` **文本节点也在弹性布局操作范围内。** + 自动空间 - 在弹性布局中对元素使用margin-right:auto 等形式可以自动撑满空间。+ 实例 弹性盒子的移动端布局 css: *{ margin: 0; padding: 0; font-size: 14px; } body{ height: 100vh; background-color:#bdc3c7; display: flex; flex-flow: column wrap; } header{ height: 8vh; background-color: #ecf0f1; /* border-bottom: solid 1vh #2c3e50; */ } footer{ display: flex; height: 50px; flex-direction: row; flex-wrap: wrap; justify-content:space-evenly; border-top: solid 1px #555; background-image: linear-gradient(to top,#ecf0f1,#bdc3c7,#ecf0f1); } main{ flex: 1; } footer div{ box-sizing: border-box; display: flex; flex:1 0; height: 100%; flex-direction: column-reverse; /* align-items: center; */ /* justify-content: center; */ cursor: pointer; } footer div:not(last-child){ border-right: solid 1px #555; } footer div h4{ display: flex; flex:0 0 50px; flex-direction: column; text-align: center; justify-content: center; cursor: pointer; } footer div ul{ list-style: none; text-align: center; display: flex; flex-direction: column; justify-content: center; border: solid 1px #555; border-radius: 5px; margin-bottom: 5px; width: 100%; } footer div ul li{ flex: 1 0 50px; border-bottom: solid 1px #555; display: flex; flex-direction: column; justify-content: center; cursor: pointer; } &lt;/style&gt;1html: 公众号 星座占卜 开心一乐 每日壁纸 分类 财经 体育 娱乐 ``` 实现效果:","link":"/2020/05/09/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"},{"title":"初识numpy","text":"1import numpy as np 1a=np.array([1,2,3,4,5]) 12 1type(a) numpy.ndarray生成指定维数的随机多为数据1arr=np.random.rand(3,4) 1arr array([[0.35352104, 0.6165823 , 0.42097802, 0.21503512], [0.60753175, 0.43145459, 0.26937949, 0.56143926], [0.32406546, 0.9922783 , 0.33465788, 0.89539713]])1arr=np.random.randint(-1,5,size=(3,4)) 1arr array([[ 2, 0, 2, 4], [ 4, 3, -1, 2], [ 2, 3, 2, 2]])生成指定维度大小（3行4列）的随机多维整型数据（二维），randint()可以指定区间（-1, 5）1arr=np.random.uniform(-1,5,(3,4))#生成指定位数的随机浮点型数据 1arr array([[ 4.02759409, -0.35544569, -0.25476112, 2.56202748], [ 0.00717535, 3.52806175, 0.53265671, 4.58275286], [-0.62130975, 4.11340699, 0.16998171, 4.12237009]]) 维度个数 维度大小 数据类型 1arr.ndim 21arr.shape (3, 4)1arr.dtype dtype(&apos;float64&apos;)ndarray的数据创建 np.array(collection) 1# list序列转换为ndarray序列对象(list) 1arr=np.array(range(1,10)) 1arr array([1, 2, 3, 4, 5, 6, 7, 8, 9])1arr.ndim 11arr.shape (9,)1arr=np.array([range(0,9),range(0,9)]) 1arr array([[0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8]])1type(arr) numpy.ndarray其他常用的命令1arr=np.arange(15) 1arr array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])1arr.reshape(3,5) array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14]])1arr.reshape(1,3,5) array([[[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]])1np.arange(1,15) array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])1np.random.shuffle(arr) 1arr array([ 7, 6, 0, 1, 10, 8, 5, 3, 11, 9, 2, 4, 14, 13, 12])np.random.shuffle()将打乱数组序列 矢量运算,数组相乘相加 12arr=np.array([[1,2,3], [4,5,6]]) 1arr*arr array([[ 1, 4, 9], [16, 25, 36]])1arr+arr array([[ 2, 4, 6], [ 8, 10, 12]])1234c = np.array( [[[ 0, 1, 2], # a 3D array (two stacked 2D arrays) [ 10, 12, 13]], [[100,101,102], [110,112,113]]]) 12for row in c: print(row) [[ 0 1 2] [10 12 13]] [[100 101 102] [110 112 113]]关于numpy的更多用法参考numpy中文文档 12","link":"/2020/05/02/%E5%88%9D%E8%AF%86numpy/"}],"tags":[{"name":"负能量","slug":"负能量","link":"/tags/%E8%B4%9F%E8%83%BD%E9%87%8F/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"django","slug":"django","link":"/tags/django/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"数据分析","slug":"数据分析","link":"/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}],"categories":[{"name":"dairy","slug":"dairy","link":"/categories/dairy/"},{"name":"python","slug":"python","link":"/categories/python/"},{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"python 机器学习","slug":"python-机器学习","link":"/categories/python-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}]}